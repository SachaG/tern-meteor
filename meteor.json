{
  "!name": "meteor",
  "!define": {
    "IMeteor.absoluteUrl.options": {
      "secure": "bool",
      "replaceLocalhost": "bool",
      "rootUrl": "string"
    },
    "IMeteor.status.!ret": {
      "connected": "bool",
      "status": "string",
      "retryCount": "number",
      "retryTime": "number",
      "reason": "string"
    },
    "IMeteor.Collection.options": {
      "connection": "Object",
      "idGeneration": "string",
      "transform": "Function"
    },
    "IMeteor.loginWithExternalService.options": {
      "requestPermissions": "[string]",
      "requestOfflineToken": "bool",
      "forceApprovalPrompt": "bool"
    },
    "IMeteor.loginWithFacebook.options": {
      "requestPermissions": "[string]",
      "requestOfflineToken": "bool",
      "forceApprovalPrompt": "bool"
    },
    "IMeteor.loginWithGithub.options": {
      "requestPermissions": "[string]",
      "requestOfflineToken": "bool",
      "forceApprovalPrompt": "bool"
    },
    "IMeteor.loginWithGoogle.options": {
      "requestPermissions": "[string]",
      "requestOfflineToken": "bool",
      "forceApprovalPrompt": "bool"
    },
    "IMeteor.loginWithMeetup.options": {
      "requestPermissions": "[string]",
      "requestOfflineToken": "bool",
      "forceApprovalPrompt": "bool"
    },
    "IMeteor.loginWithTwitter.options": {
      "requestPermissions": "[string]",
      "requestOfflineToken": "bool",
      "forceApprovalPrompt": "bool"
    },
    "IMeteor.loginWithWeibo.options": {
      "requestPermissions": "[string]",
      "requestOfflineToken": "bool",
      "forceApprovalPrompt": "bool"
    },
    "IMeteorViewModel.events.eventMap": {
      "__item": "fn(eventName: string) -> Function"
    },
    "IMeteorManager.events.eventMap": {
      "__item": "fn(eventType: string) -> Function"
    },
    "IMeteorAccounts.config.options": {
      "sendVerificationEmail": "bool",
      "forbidClientAccountCreation": "bool"
    },
    "IMeteorAccounts.ui.config.options": {
      "requestPermissions": "Object",
      "requestOfflineToken": "Object",
      "passwordSignupFields": "string"
    },
    "IMeteorAccounts.createUser.options": {
      "username": "string",
      "email": "string",
      "password": "string",
      "profile": "string"
    },
    "IMeteorAccounts.forgotPassword.options": {
      "email": "string"
    },
    "IMeteorHTTP.call.options": {
      "content": "string",
      "data": "Object",
      "query": "string",
      "params": "Object",
      "auth": "string",
      "headers": "Object",
      "timeout": "number",
      "followRedirects": "bool"
    },
    "IMeteorHTTP.get.options": {
      "content": "string",
      "data": "Object",
      "query": "string",
      "params": "Object",
      "auth": "string",
      "headers": "Object",
      "timeout": "number",
      "followRedirects": "bool"
    },
    "IMeteorHTTP.post.options": {
      "content": "string",
      "data": "Object",
      "query": "string",
      "params": "Object",
      "auth": "string",
      "headers": "Object",
      "timeout": "number",
      "followRedirects": "bool"
    },
    "IMeteorHTTP.put.options": {
      "content": "string",
      "data": "Object",
      "query": "string",
      "params": "Object",
      "auth": "string",
      "headers": "Object",
      "timeout": "number",
      "followRedirects": "bool"
    },
    "IMeteorHTTP.del.options": {
      "content": "string",
      "data": "Object",
      "query": "string",
      "params": "Object",
      "auth": "string",
      "headers": "Object",
      "timeout": "number",
      "followRedirects": "bool"
    },
    "IMeteorEmail.send.options": {
      "from": "string",
      "to": "?",
      "cc": "?",
      "bcc": "?",
      "replyTo": "?",
      "subject": "string",
      "text": "string",
      "html": "string",
      "headers": "Object"
    }
  },
  "IMeteor": {
    "isClient": "bool",
    "isServer": "bool",
    "startup": "fn(func: Function)",
    "absoluteUrl": "fn(path: string, options: IMeteor.absoluteUrl.options)",
    "settings": "Object",
    "release": "string",
    "publish": "fn(name: string, func: Function) -> ?",
    "subscribe": "fn(name: string, arg1?: ?, arg2?: ?, ars3?: ?, arg4?: ?, callbacks?: Object) -> IMeteorHandle",
    "methods": "fn(methods: Object)",
    "Error": "fn(error: number, reason?: string, details?: string)",
    "call": "fn(name: string, param1?: Object, param2?: Object, param3?: Object, param4?: Object, asyncCallback?: Function)",
    "apply": "fn(name: string, options: [?], asyncCallback?: Function)",
    "defer": "fn(callback: Function)",
    "status": "fn() -> IMeteor.status.!ret",
    "reconnect": "fn()",
    "disconnect": "fn()",
    "Collection": "fn(name: string, options?: IMeteor.Collection.options)",
    "user": "fn() -> IMeteorUser",
    "userId": "fn() -> string",
    "users": "IMeteorUserCollection",
    "loggingIn": "fn() -> bool",
    "logout": "fn(callback?: Function)",
    "loginWithPassword": "fn(user: Object, password: string, callback?: Function)",
    "loginWithExternalService": "fn(options?: IMeteor.loginWithExternalService.options, callback?: Function)",
    "loginWithFacebook": "fn(options?: IMeteor.loginWithFacebook.options, callback?: Function)",
    "loginWithGithub": "fn(options?: IMeteor.loginWithGithub.options, callback?: Function)",
    "loginWithGoogle": "fn(options?: IMeteor.loginWithGoogle.options, callback?: Function)",
    "loginWithMeetup": "fn(options?: IMeteor.loginWithMeetup.options, callback?: Function)",
    "loginWithTwitter": "fn(options?: IMeteor.loginWithTwitter.options, callback?: Function)",
    "loginWithWeibo": "fn(options?: IMeteor.loginWithWeibo.options, callback?: Function)",
    "render": "fn(htmlFunc: Function) -> DocumentFragment",
    "renderList": "fn(observable: IMeteorCursor, docFunc: Function, elseFunc?: Function) -> DocumentFragment",
    "setTimeout": "fn(func: Function, delay: number)",
    "setInterval": "fn(func: Function, delay: number)",
    "clearTimeout": "fn(id: number)",
    "clearInterval": "fn(id: number)",
    "subscribeWithPagination": "fn(collection: string, limit: number) -> IMeteorHandle",
    "Template": "fn()",
    "Router": "IMeteorRouter",
    "Errors": "IMeteorErrors"
  },
  "IMeteorCollection": {
    "find": "fn(selector?: ?, options?: Object) -> IMeteorCursor",
    "findOne": "fn(selector: ?, options?: Object) -> ?",
    "insert": "fn(doc: Object, callback?: Function) -> string",
    "update": "fn(selector: ?, modifier: ?, options?: Object, callback?: Function)",
    "remove": "fn(selector: ?, callback?: Function)",
    "allow": "fn(options: Object) -> bool",
    "deny": "fn(options: Object) -> bool",
    "ObjectID": "fn(hexString?: string) -> Object"
  },
  "IMeteorCursor": {
    "forEach": "fn(callback: Function)",
    "map": "fn(callback: Function)",
    "fetch": "fn() -> [?]",
    "count": "fn() -> number",
    "rewind": "fn()",
    "observe": "fn(callbacks: Object)",
    "observeChanges": "fn(callbacks: Object)"
  },
  "IMeteorViewModel": {
    "rendered": "fn(callback: Function)",
    "created": "fn(callback: Function)",
    "destroyed": "fn(callback: Function)",
    "events": "fn(eventMap: IMeteorViewModel.events.eventMap)",
    "helpers": "fn(helpers: Object)",
    "preserve": "fn(selector: Object)"
  },
  "IMeteorManager": {
    "rendered": "fn(callback: Function)",
    "created": "fn(callback: Function)",
    "destroyed": "fn(callback: Function)",
    "events": "fn(eventMap: IMeteorManager.events.eventMap)",
    "helpers": "fn(helpers: Object) -> ?",
    "preserve": "fn(selector: Object)"
  },
  "IMeteorEvent": {
    "type": "MeteorEventType.Value",
    "target": "Element",
    "currentTarget": "Element",
    "which": "number",
    "stopPropogation": "fn()",
    "stopImmediatePropogation": "fn()",
    "preventDefault": "fn()",
    "isPropogationStopped": "fn() -> bool",
    "isImmediatePropogationStopped": "fn() -> bool",
    "isDefaultPrevented": "fn() -> bool"
  },
  "MeteorEventType": {
    "Value": {
      "_map": "?",
      "click": "click",
      "dblclick": "dblclick",
      "focus": "focus",
      "blur": "blur",
      "change": "change",
      "mouseenter": "mouseenter",
      "mouseleave": "mouseleave",
      "mousedown": "mousedown",
      "mouseup": "mouseup",
      "keydown": "keydown",
      "keypress": "keypress",
      "keyup": "keyup",
      "tap": "tap"
    }
  },
  "IMeteorSession": {
    "set": "fn(key: string, value: Object)",
    "setDefault": "fn(key: string, value: Object)",
    "get": "fn(key: string) -> Object",
    "equals": "fn(key: string, value: ?)"
  },
  "IMeteorHandle": {
    "loaded": "fn() -> number",
    "limit": "fn() -> number",
    "ready": "fn() -> bool",
    "loadNextPage": "fn()"
  },
  "IMeteorUser": {
    "_id": "string",
    "username": "string",
    "emails": {
      "address": "string",
      "verified": "bool"
    },
    "profile": "?",
    "services": "?",
    "createdAt": "number"
  },
  "IMeteorUserCollection": {
    "find": "fn(selector?: ?, options?: Object) -> IMeteorCursor",
    "findOne": "fn(selector: ?, options?: Object) -> IMeteorUser",
    "insert": "fn(doc: IMeteorUser, callback?: Function) -> IMeteorUser",
    "update": "fn(selector: ?, modifier: ?, options?: Object, callback?: Function)",
    "remove": "fn(selector: ?, callback?: Function)",
    "allow": "fn(options: Object) -> bool",
    "deny": "fn(options: Object) -> bool",
    "ObjectID": "fn(hexString?: string) -> Object"
  },
  "IMeteorAccounts": {
    "config": "fn(options: IMeteorAccounts.config.options)",
    "ui": {
      "config": "fn(options: IMeteorAccounts.ui.config.options)"
    },
    "validateNewUser": "fn(func: Function)",
    "onCreateUser": "fn(func: Function)",
    "createUser": "fn(options: IMeteorAccounts.createUser.options, callback?: Function)",
    "changePassword": "fn(oldPassword: string, newPassword: string, callback?: Function)",
    "forgotPassword": "fn(options: IMeteorAccounts.forgotPassword.options, callback?: Function)",
    "resetPassword": "fn(token: string, newPassword: string, callback?: Function)",
    "setPassword": "fn(userId: string, newPassword: string)",
    "verifyEmail": "fn(token: string, callback?: Function)",
    "sendResetPasswordEmail": "fn(userId: string, email?: string)",
    "sendEnrollmentEmail": "fn(userId: string, email?: string)",
    "sendVerificationEmail": "fn(userId: string, email?: string)",
    "emailTemplates": {
      "from": "string",
      "siteName": "string",
      "resetPassword": "IMeteorEmailValues",
      "enrollAccount": "IMeteorEmailValues",
      "verifyEmail": "IMeteorEmailValues"
    },
    "loginServiceConfiguration": {
      "remove": "fn(options: Object)",
      "insert": "fn(options: Object)"
    }
  },
  "IMeteorEmailValues": {
    "subject": "Function",
    "text": "Function"
  },
  "IMeteorMatch": {
    "test": "fn(value: ?, pattern: ?) -> bool",
    "Any": "?",
    "String": "?",
    "Number": "?",
    "Boolean": "?",
    "undefined": "?",
    "null": "?",
    "Integer": "?",
    "ObjectIncluding": "?",
    "Object": "?",
    "Optional": "fn(pattern: string)",
    "OneOf": "fn()",
    "Where": "fn(condition: bool)"
  },
  "IExternalServiceParams": {
    "options": {
      "requestPermissions": "[string]",
      "requestOfflineToken": "bool",
      "forceApprovalPrompt": "bool"
    },
    "callback": "Function"
  },
  "IMeteorDeps": {
    "autorun": "fn(runFunc: Function) -> IMeteorComputationObject",
    "flush": "fn()",
    "nonreactive": "fn(func: Function)",
    "active": "bool",
    "currentComputation": "IMeteorComputationObject",
    "onInvalidate": "fn(callback: Function)",
    "afterFlush": "fn(callback: Function)",
    "Computation": "fn()",
    "Dependency": "fn()"
  },
  "IMeteorComputationObject": {
    "stop": "fn()",
    "invalidate": "fn()",
    "onInvalidate": "fn(callback: Function)",
    "stopped": "bool",
    "invalidated": "bool",
    "firstRun": "bool"
  },
  "IMeteorDependencyObject": {
    "changed": "fn()",
    "depend": "fn(fromComputation?: IMeteorComputationObject) -> bool",
    "hasDependents": "fn() -> bool"
  },
  "IMeteorEJSON": {
    "parse": "fn(str: string)",
    "stringify": "fn(val: ?) -> string",
    "fromJSONValue": "fn(val: ?) -> ?",
    "toJSONValue": "fn(val: ?) -> JSON",
    "equals": "fn(any: ?) -> bool",
    "clone": "fn(val: ?) -> ?",
    "newBinary": "fn(size: number)",
    "isBinary": "fn(x: ?) -> bool",
    "addType": "fn(name: string, factory: Function)"
  },
  "IMeteorHTTP": {
    "call": "fn(method: string, url: string, options: IMeteorHTTP.call.options, asyncCallback?: Function) -> IMeteorHTTPResult",
    "get": "fn(url: string, options?: IMeteorHTTP.get.options, asyncCallback?: Function) -> IMeteorHTTPResult",
    "post": "fn(url: string, options?: IMeteorHTTP.post.options, asyncCallback?: Function) -> IMeteorHTTPResult",
    "put": "fn(url: string, options?: IMeteorHTTP.put.options, asyncCallback?: Function) -> IMeteorHTTPResult",
    "del": "fn(url: string, options?: IMeteorHTTP.del.options, asyncCallback?: Function) -> IMeteorHTTPResult"
  },
  "IMeteorHTTPCallOptions": {
    "content": "string",
    "data": "Object",
    "query": "string",
    "params": "Object",
    "auth": "string",
    "headers": "Object",
    "timeout": "number",
    "followRedirects": "bool"
  },
  "IMeteorHTTPResult": {
    "statusCode": "number",
    "content": "string",
    "data": "JSON",
    "headers": "Object"
  },
  "IMeteorEmail": {
    "send": "fn(options: IMeteorEmail.send.options)"
  },
  "IMeteorAssets": {
    "getText": "fn(assetPath: string, asyncCallback?: Function) -> string",
    "getBinary": "fn(assetPath: string, asyncCallback?: Function) -> ?"
  },
  "IMeteorDPP": {
    "connect": "fn(url: string)"
  },
  "Meteor": "IMeteor",
  "Collection": "IMeteorCollection",
  "Session": "IMeteorSession",
  "Deps": "IMeteorDeps",
  "Accounts": "IMeteorAccounts",
  "Match": "IMeteorMatch",
  "check": "fn(value: ?, pattern: ?)",
  "Computation": "IMeteorComputationObject",
  "Dependency": "IMeteorDependencyObject",
  "EJSON": "IMeteorEJSON",
  "HTTP": "IMeteorHTTP",
  "Email": "IMeteorEmail",
  "Assets": "IMeteorAssets",
  "DPP": "IMeteorDPP",
  "changed": "fn(collection: string, id: string, fields: ?, Object: ?)",
  "IMeteorRouter": {
    "page": "fn()",
    "add": "fn(route: Object)",
    "to": "fn(path: string)",
    "filters": "fn(filtersMap: Object)",
    "filter": "fn(filterName: string, options?: Object)",
    "map": "fn(routeMap: Function)",
    "path": "fn(route: string, params?: Object)",
    "url": "fn(route: string)",
    "routes": "Object",
    "configure": "fn(options: IMeteorRouterConfig)"
  },
  "IMeteorRouterConfig": {
    "layout": "string",
    "notFoundTemplate": "string",
    "loadingTemplate": "string",
    "renderTemplates": "Object"
  },
  "IMeteorErrors": {
    "throw": "fn(message: string)",
    "clear": "fn()"
  },
  "Router": "IMeteorRouter"
}
